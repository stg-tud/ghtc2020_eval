#![feature(test)]

extern crate test;

use bp7compression::*;
use test::Bencher;

#[bench]
fn snap_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| snap_compress(&bundle_str.as_bytes()))
}

#[bench]
fn snap_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| snap_compress(&bundle))
}

#[bench]
fn brotli_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| brotli_compress(&bundle_str.as_bytes()))
}

#[bench]
fn brotli_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| brotli_compress(&bundle))
}

#[bench]
fn bz2_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| bz2_compress(&bundle_str.as_bytes()))
}

#[bench]
fn bz2_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| bz2_compress(&bundle))
}

#[bench]
fn xz2_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| xz2_compress(&bundle_str.as_bytes()))
}

#[bench]
fn xz2_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| xz2_compress(&bundle))
}

#[bench]
fn miniz_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| miniz_compress(&bundle_str.as_bytes()))
}

#[bench]
fn miniz_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| miniz_compress(&bundle))
}

#[bench]
fn libflate_zlib_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| libflate_zlib_compress(&bundle_str.as_bytes()))
}

#[bench]
fn libflate_zlib_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| libflate_zlib_compress(&bundle))
}

#[bench]
fn libflate_gzip_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| libflate_gzip_compress(&bundle_str.as_bytes()))
}

#[bench]
fn libflate_gzip_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| libflate_gzip_compress(&bundle))
}

#[bench]
fn libflate_deflate_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| libflate_deflate_compress(&bundle_str.as_bytes()))
}

#[bench]
fn libflate_deflate_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| libflate_deflate_compress(&bundle))
}

#[bench]
fn smaz_str(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    b.iter(|| smaz_compress(&bundle_str.as_bytes()))
}

#[bench]
fn smaz_bin(b: &mut Bencher) {
    let bundle_str = "9f8907000182016b6e6f6465332f696e626f7882016b6e6f6465322f696e626f7882016b6e6f6465322f696e626f78821a251f8061001ad693a400422a6886010000014341424344454647484950515242237186080100010042dbccff";
    let bundle = unhexify(bundle_str).unwrap();
    b.iter(|| smaz_compress(&bundle))
}
